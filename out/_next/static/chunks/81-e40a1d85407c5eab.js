"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[81],{81:function(e,t,s){s.d(t,{Qc:function(){return n},oH:function(){return a},rV:function(){return o},ws:function(){return d}});var i=s(5583),r=s(1780);let n=e=>{let t=[];e.length<4&&t.push("비밀번호는 4자 이상이어야 합니다");let s=Math.min(10*e.length,100),i={medium:s>=50&&s<80,strong:s>=80};return{isValid:0===t.length,errors:t,warnings:[],score:s,strength:i.strong?"strong":i.medium?"medium":"weak"}},a=e=>{if(!e||"string"!=typeof e)return{isValid:!1,error:"이메일을 입력해주세요."};let t=e.trim().toLowerCase();return t.includes("@")?{isValid:!0,normalizedEmail:t}:{isValid:!1,error:"이메일에 @가 포함되어야 합니다."}},o=e=>{if(!e||"string"!=typeof e)return{isValid:!1,error:"사용자명을 입력해주세요."};let t=e.trim();return t.length<1?{isValid:!1,error:"사용자명을 입력해주세요."}:t.length>50?{isValid:!1,error:"사용자명은 50자 이하여야 합니다."}:{isValid:!0,normalizedUsername:t}},l={getItem:e=>{if("undefined"==typeof localStorage)return null;try{return localStorage.getItem(e)}catch(e){return console.warn("localStorage getItem error:",e),null}},setItem:(e,t)=>{if("undefined"!=typeof localStorage)try{localStorage.setItem(e,t)}catch(e){console.warn("localStorage setItem error:",e)}},removeItem:e=>{if("undefined"!=typeof localStorage)try{localStorage.removeItem(e)}catch(e){console.warn("localStorage removeItem error:",e)}}};class d{init(){"undefined"!=typeof localStorage&&(l.getItem(this.usersKey)||l.setItem(this.usersKey,JSON.stringify({})),l.getItem(this.sessionsKey)||l.setItem(this.sessionsKey,JSON.stringify({})),this.cleanupExpiredSessions(),this.sessionCleanupInterval||(this.sessionCleanupInterval=setInterval(()=>{this.cleanupExpiredSessions()},3e5)))}isUsernameUnique(e){return!this.getAllUsers()[e]}isEmailUnique(e){return!Object.values(this.getAllUsers()).some(t=>t.email===e)}async registerUser(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!e||"string"!=typeof e)throw Error("유효한 사용자 ID가 필요합니다.");let s=o(e);if(!s.isValid)throw Error(s.error);if(!this.isUsernameUnique(s.normalizedUsername))throw Error("이미 사용 중인 사용자명입니다.");if(!t.password)throw Error("비밀번호가 필요합니다.");if(!t.email)throw Error("이메일이 필요합니다.");let n=a(t.email);if(!n.isValid)throw Error(n.error);if(!this.isEmailUnique(n.normalizedEmail))throw Error("이미 사용 중인 이메일 주소입니다.");try{var l,d,c,u,S;let s=await fetch("/api/auth/register",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:e,email:t.email,password:t.password,displayName:t.displayName||e})}),n=await s.json();if(!s.ok)throw Error(n.error||"Registration failed");return(0,r._)((0,i._)({},n.user),{display_name:(null===(l=n.user)||void 0===l?void 0:l.display_name)||(null===(d=n.user)||void 0===d?void 0:d.username)||(null===(c=n.user)||void 0===c?void 0:c.id),username:(null===(u=n.user)||void 0===u?void 0:u.username)||(null===(S=n.user)||void 0===S?void 0:S.id)})}catch(e){throw console.error("Registration API error:",e),Error(e.message||"회원가입에 실패했습니다.")}}initializeUserStats(e){let t="userStats_".concat(e),s={userId:e,totalSessions:0,completedSessions:0,totalMinutes:0,completedMinutes:0,streakDays:0,longestStreak:0,lastSessionDate:null,weeklyGoal:140,monthlyStats:{},dailyStats:{},tags:{},locations:{},completionRate:0,averageSessionLength:0,createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()};l.setItem(t,JSON.stringify(s));let i="stepSessions_".concat(e);l.setItem(i,JSON.stringify([]))}async loginUser(e,t){let s=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!e||!t)throw Error("사용자명과 비밀번호가 필요합니다.");try{let i=await fetch("/api/auth/login",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:e,password:t,rememberMe:s})}),r=await i.json();if(!i.ok)throw Error(r.error||"Login failed");let n=r.data.session.accessToken,a={userId:r.data.user.id,token:n,createdAt:new Date().toISOString(),expiresAt:new Date(1e3*r.data.session.expiresAt).toISOString(),rememberMe:s,lastActivity:new Date().toISOString(),isActive:!0},o=this.getSessions();return o[n]=a,l.setItem(this.sessionsKey,JSON.stringify(o)),l.setItem("currentSessionToken",n),{user:r.data.user,sessionToken:n}}catch(e){throw console.error("Login API error:",e),Error(e.message||"로그인에 실패했습니다.")}}getUser(e){let t=this.getAllUsers()[e];return t?{id:t.id,displayName:t.displayName,email:t.email,createdAt:t.createdAt,lastLogin:t.lastLogin,preferences:t.preferences,avatar:t.avatar,bio:t.bio,emailVerified:t.emailVerified}:null}getAllUsers(){return JSON.parse(l.getItem(this.usersKey)||"{}")}getSessions(){return JSON.parse(l.getItem(this.sessionsKey)||"{}")}getUserStats(e){let t="userStats_".concat(e);return JSON.parse(l.getItem(t)||"null")||(this.initializeUserStats(e),JSON.parse(l.getItem(t)))}getUserSessions(e){return JSON.parse(l.getItem("stepSessions_".concat(e))||"[]")}getActiveSession(e){let t=l.getItem("activeSTEPSession_".concat(e));return t?JSON.parse(t):null}createSTEPSession(e,t){let s;let n=new Date;if(t.scheduledTime){let e=new Date(t.scheduledTime);s=e>n?e:n}else s=n;let a="session_".concat(Date.now()),o=6e4*(t.duration||25),d={id:a,title:t.title||"STEP 세션",goal:t.goal||"",tags:t.tags||"",location:t.location||"",duration:t.duration||25,startTime:s.toISOString(),endTime:new Date(s.getTime()+o).toISOString(),user:e,status:"active",createdAt:n.toISOString()},c="activeSTEPSession_".concat(e);l.setItem(c,JSON.stringify(d));let u="stepSessions_".concat(e),S=JSON.parse(l.getItem(u)||"[]");return S.push((0,r._)((0,i._)({},d),{status:"scheduled"})),l.setItem(u,JSON.stringify(S)),this.updateUserStatsForNewSession(e,d),d}updateUserStatsForNewSession(e,t){let s=this.getUserStats(e),i={totalSessions:s.totalSessions+1,totalMinutes:s.totalMinutes+t.duration},r=new Date().toISOString().split("T")[0];s.dailyStats[r]||(s.dailyStats[r]={sessions:0,minutes:0,completed:0}),s.dailyStats[r].sessions++,s.dailyStats[r].minutes+=t.duration,i.dailyStats=s.dailyStats;let n=r.substring(0,7);s.monthlyStats[n]||(s.monthlyStats[n]={sessions:0,minutes:0,completed:0}),s.monthlyStats[n].sessions++,s.monthlyStats[n].minutes+=t.duration,i.monthlyStats=s.monthlyStats,t.tags&&(t.tags.split(",").map(e=>e.trim()).filter(e=>e).forEach(e=>{s.tags[e]||(s.tags[e]={count:0,minutes:0}),s.tags[e].count++,s.tags[e].minutes+=t.duration}),i.tags=s.tags),t.location&&(s.locations[t.location]||(s.locations[t.location]={count:0,minutes:0}),s.locations[t.location].count++,s.locations[t.location].minutes+=t.duration,i.locations=s.locations),this.updateStreak(s,r),i.streakDays=s.streakDays,i.longestStreak=s.longestStreak,i.lastSessionDate=r,this.updateUserStats(e,i)}updateStreak(e,t){let s=e.lastSessionDate;if(s){let i=new Date(s),r=Math.floor((new Date(t)-i)/864e5);0===r||(1===r?e.streakDays++:e.streakDays=1)}else e.streakDays=1;e.streakDays>e.longestStreak&&(e.longestStreak=e.streakDays)}completeSTEPSession(e,t){let s="activeSTEPSession_".concat(e),i=JSON.parse(l.getItem(s)||"null");if(!i||i.id!==t)return;l.removeItem(s);let r="stepSessions_".concat(e),n=JSON.parse(l.getItem(r)||"[]"),a=n.findIndex(e=>e.id===t);a>=0&&(n[a].status="completed",n[a].completedAt=new Date().toISOString(),l.setItem(r,JSON.stringify(n))),this.updateUserStatsForCompletion(e,i)}updateUserStatsForCompletion(e,t){let s=this.getUserStats(e),i={completedSessions:s.completedSessions+1,completedMinutes:s.completedMinutes+t.duration},r=new Date().toISOString().split("T")[0];s.dailyStats[r]&&(s.dailyStats[r].completed++,i.dailyStats=s.dailyStats);let n=r.substring(0,7);s.monthlyStats[n]&&(s.monthlyStats[n].completed++,i.monthlyStats=s.monthlyStats),this.updateUserStats(e,i)}stopSTEPSession(e,t){let s="activeSTEPSession_".concat(e);l.removeItem(s);let i="stepSessions_".concat(e),r=JSON.parse(l.getItem(i)||"[]"),n=r.findIndex(e=>e.id===t);n>=0&&(r[n].status="stopped",r[n].stoppedAt=new Date().toISOString(),l.setItem(i,JSON.stringify(r)))}clearActiveSession(e){l.removeItem("activeSTEPSession_".concat(e))}updateUserStats(e,t){let s="userStats_".concat(e),n=this.getUserStats(e),a=(0,r._)((0,i._)({},n,t),{updatedAt:new Date().toISOString()});return a.totalSessions>0&&(a.completionRate=Math.round(a.completedSessions/a.totalSessions*100)),a.completedSessions>0&&(a.averageSessionLength=Math.round(a.completedMinutes/a.completedSessions)),l.setItem(s,JSON.stringify(a)),a}validateSession(e){if(!e)return null;let t=this.getSessions(),s=t[e];if(!s||!s.isActive)return null;let i=new Date;if(i>new Date(s.expiresAt))return this.invalidateSession(e),null;let r=this.getClientIP();s.ipAddress&&r&&s.ipAddress!==r&&console.warn("Session IP mismatch detected:",{original:s.ipAddress,current:r}),s.lastActivity=i.toISOString();let n=s.rememberMe?this.extendedSessionTimeout:this.sessionTimeout;return s.expiresAt=new Date(i.getTime()+n).toISOString(),t[e]=s,l.setItem(this.sessionsKey,JSON.stringify(t)),s}getCurrentSession(){let e=l.getItem("currentSessionToken");return this.validateSession(e)}logoutSession(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=e||l.getItem("currentSessionToken");t&&this.invalidateSession(t),l.removeItem("currentSessionToken"),l.removeItem("currentUser")}invalidateSession(e){let t=this.getSessions();t[e]&&(t[e].isActive=!1,t[e].invalidatedAt=new Date().toISOString(),l.setItem(this.sessionsKey,JSON.stringify(t)))}invalidateAllUserSessions(e){let t=this.getSessions(),s=!1;Object.keys(t).forEach(i=>{t[i].userId===e&&t[i].isActive&&(t[i].isActive=!1,t[i].invalidatedAt=new Date().toISOString(),s=!0)}),s&&l.setItem(this.sessionsKey,JSON.stringify(t))}getClientIP(){return"browser-client"}cleanupExpiredSessions(){let e=this.getSessions(),t=new Date,s=!1;return Object.keys(e).forEach(i=>{let r=e[i];(new Date(r.expiresAt)<=t||!r.isActive)&&(delete e[i],s=!0)}),s&&l.setItem(this.sessionsKey,JSON.stringify(e)),s}getActiveSessions(e){let t=this.getSessions(),s=new Date;return Object.values(t).filter(t=>t.userId===e&&t.isActive&&new Date(t.expiresAt)>s).map(e=>({token:e.token,createdAt:e.createdAt,lastActivity:e.lastActivity,expiresAt:e.expiresAt,rememberMe:e.rememberMe,ipAddress:e.ipAddress,userAgent:e.userAgent}))}destroy(){this.sessionCleanupInterval&&(clearInterval(this.sessionCleanupInterval),this.sessionCleanupInterval=null)}async updateUserProfile(e,t){let s=this.getAllUsers(),r=s[e];if(!r)throw Error("User not found");if(t.newPassword){if(!t.currentPassword)throw Error("현재 비밀번호가 필요합니다.");if(t.currentPassword!==r.password)throw Error("현재 비밀번호가 올바르지 않습니다.");let e=n(t.newPassword);if(!e.isValid)throw Error("비밀번호 강도가 부족합니다: "+e.errors.join(", "));r.password=t.newPassword}if(t.email&&t.email!==r.email){if(!a(t.email))throw Error("유효한 이메일 주소를 입력해주세요.");if(!this.isEmailUnique(t.email))throw Error("이미 사용 중인 이메일 주소입니다.");r.email=t.email,r.emailVerified=!1}return t.displayName&&(r.displayName=t.displayName),void 0!==t.bio&&(r.bio=t.bio),void 0!==t.avatar&&(r.avatar=t.avatar),t.preferences&&(r.preferences=(0,i._)({},r.preferences,t.preferences)),r.updatedAt=new Date().toISOString(),l.setItem(this.usersKey,JSON.stringify(s)),this.getUser(e)}getUserActivity(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:30,s=this.getUserSessions(e),i=this.getUserStats(e),r=new Date;r.setDate(r.getDate()-t);let n=s.filter(e=>new Date(e.createdAt)>=r),a={};return n.forEach(e=>{let t=e.createdAt.split("T")[0];a[t]||(a[t]={sessions:0,completed:0,totalMinutes:0,completedMinutes:0}),a[t].sessions++,a[t].totalMinutes+=e.duration,"completed"===e.status&&(a[t].completed++,a[t].completedMinutes+=e.duration)}),{totalSessions:n.length,completedSessions:n.filter(e=>"completed"===e.status).length,totalMinutes:n.reduce((e,t)=>e+t.duration,0),completedMinutes:n.filter(e=>"completed"===e.status).reduce((e,t)=>e+t.duration,0),activityByDay:a,currentStreak:i.streakDays,longestStreak:i.longestStreak}}deleteUser(e){if(!e)return!1;let t=this.getAllUsers();delete t[e],l.setItem(this.usersKey,JSON.stringify(t)),["userStats_".concat(e),"stepSessions_".concat(e),"activeSTEPSession_".concat(e),"meetings_".concat(e)].forEach(e=>{l.removeItem(e)});let s=this.getSessions();return Object.keys(s).forEach(t=>{s[t].userId===e&&delete s[t]}),l.setItem(this.sessionsKey,JSON.stringify(s)),!0}getMeetings(e){let t=l.getItem("meetings_".concat(e));return t?JSON.parse(t):[]}saveMeeting(e,t){let s=this.getMeetings(e),n=(0,r._)((0,i._)({id:Date.now().toString()},t),{createdAt:new Date().toISOString(),updatedAt:new Date().toISOString()});s.push(n);let a="meetings_".concat(e);return l.setItem(a,JSON.stringify(s)),n}updateMeeting(e,t,s){let n=this.getMeetings(e),a=n.findIndex(e=>e.id===t);if(-1===a)return null;n[a]=(0,r._)((0,i._)({},n[a],s),{updatedAt:new Date().toISOString()});let o="meetings_".concat(e);return l.setItem(o,JSON.stringify(n)),n[a]}deleteMeeting(e,t){let s=this.getMeetings(e).filter(e=>e.id!==t),i="meetings_".concat(e);return l.setItem(i,JSON.stringify(s)),!0}getUpcomingMeetings(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5,s=this.getMeetings(e),i=new Date;return s.filter(e=>new Date(e.date+"T"+e.time)>=i).sort((e,t)=>new Date(e.date+"T"+e.time)-new Date(t.date+"T"+t.time)).slice(0,t)}getMeetingsForDate(e,t){let s=this.getMeetings(e),i="string"==typeof t?t:t.toISOString().split("T")[0];return s.filter(e=>e.date===i).sort((e,t)=>e.time.localeCompare(t.time))}getMeetingsForWeek(e,t){let s=this.getMeetings(e),i=new Date(t),r=new Date(i);r.setDate(i.getDate()+6);let n=i.toISOString().split("T")[0],a=r.toISOString().split("T")[0];return s.filter(e=>e.date>=n&&e.date<=a).sort((e,t)=>{let s=e.date.localeCompare(t.date);return 0===s?e.time.localeCompare(t.time):s})}getMeetingsForMonth(e,t,s){let i=this.getMeetings(e),r="".concat(t,"-").concat(String(s).padStart(2,"0"));return i.filter(e=>e.date.startsWith(r)).sort((e,t)=>{let s=e.date.localeCompare(t.date);return 0===s?e.time.localeCompare(t.time):s})}clearAllData(){if("undefined"==typeof localStorage)return!1;try{return localStorage.clear(),console.log("모든 사용자 데이터가 삭제되었습니다."),!0}catch(e){return console.warn("데이터 삭제 중 오류:",e),!1}}constructor(){this.usersKey="registeredUsers",this.sessionsKey="userSessions",this.sessionTimeout=18e5,this.extendedSessionTimeout=6048e5,this.maxLoginAttempts=5,this.accountLockTime=18e5,this.sessionCleanupInterval=null,this.init()}}}}]);